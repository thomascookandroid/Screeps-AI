var _a, _b, _c;
/** Is game running in single room simulation */
export const IS_SIM = !!Game.rooms.sim;
/** Is game running on the official server */
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
export const IS_MMO = !!((_b = (_a = Game.shard) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.startsWith("shard"));
/** The name of the account running the code  */
export const PLAYER_USERNAME = (Object.values(Game.spawns)[0] ||
    ((_c = Object.values(Game.rooms).find((r) => { var _a; return (_a = r.controller) === null || _a === void 0 ? void 0 : _a.my; })) === null || _c === void 0 ? void 0 : _c.controller) ||
    Object.values(Game.creeps)[0]).owner.username;
/** username for the Invader NPCs */
export const INVADER_USERNAME = "Invader";
/** username for Source Keeper NPCs */
export const SOURCE_KEEPER_USERNAME = "Source Keeper";
/** username for the Caravan NPCs & unclaimed ruins */
export const CARAVAN_USERNAME = "Screeps";
/** An array of all minerals */
export const MINERALS_ALL = Object.keys(MINERAL_MIN_AMOUNT);
/** An array of all lab's mineral compounds */
export const COMPOUNDS_ALL = Object.keys(REACTION_TIME);
/** A map of {@link ScreepsReturnCode} to their string names */
export const RETURN_CODES = {
    [OK]: "Ok",
    [ERR_NOT_OWNER]: "Error: Not owner",
    [ERR_NO_PATH]: "Error: No path",
    [ERR_BUSY]: "Error: Busy",
    [ERR_NAME_EXISTS]: "Error: Name exists",
    [ERR_NOT_FOUND]: "Error: Not found",
    [ERR_NOT_ENOUGH_RESOURCES]: "Error: Not enough resources",
    [ERR_INVALID_TARGET]: "Error: Invalid target",
    [ERR_FULL]: "Error: Full",
    [ERR_NOT_IN_RANGE]: "Error: Not in range",
    [ERR_INVALID_ARGS]: "Error: Invalid args",
    [ERR_TIRED]: "Error: Tired",
    [ERR_NO_BODYPART]: "Error: No bodypart",
    [ERR_RCL_NOT_ENOUGH]: "Error: Not enough RCL",
    [ERR_GCL_NOT_ENOUGH]: "Error: Not enough GCL",
};
//# sourceMappingURL=constants.js.map