class MemHack {
    constructor() {
        this.lastTick = -1;
        this.parseCpu = 0;
        this.skipWriteMax = 0;
        this.skipWriteBackoff = 1;
        this.nextWrite = 0;
        this.nextWriteInterval = 1;
        this.run();
    }
    /**
     * Try to reuse memory from the last tick
     * @returns CPU used for parsing memory
     */
    run() {
        if (Game.time === this.lastTick)
            return this.parseCpu;
        if (this.memory && this.lastTick + 1 === Game.time) {
            // Reuse previous memory
            const g = global;
            delete g.Memory;
            g.Memory = this.memory;
            this.parseCpu = 0;
            if (this.skipWriteBackoff <= 1 || this.nextWrite-- <= 0) {
                ;
                RawMemory._parsed = this.memory;
                if (this.skipWriteBackoff > 1) {
                    this.nextWrite = Math.min(this.nextWriteInterval, this.skipWriteMax);
                    this.nextWriteInterval *= this.skipWriteBackoff;
                }
            } // else: skip memory stringify at the end of this tick
        }
        else {
            // Parse memory
            const before = Game.cpu.getUsed();
            this.memory = Memory;
            this.memory = RawMemory._parsed;
            this.parseCpu = Game.cpu.getUsed() - before;
            this.nextWrite = 0;
            this.nextWriteInterval = 1;
        }
        this.lastTick = Game.time;
        return this.parseCpu;
    }
    /**
     * Set the backoff and limit for skipping memory writes
     * @param limit maximum interval between writes
     * @param backoff multiplier for the next write interval
     */
    setSkipWriteRate(limit, backoff = 1.2) {
        this.skipWriteMax = limit;
        this.skipWriteBackoff = backoff;
    }
}
/**
 * Ripped from https://github.com/AlinaNova21/ZeSwarm/
 * Organized by Carson Burke and xTwisteDx
 *
 * Usage:
 * Before the loop, import memHack
 * At start of loop(), run memHack.run()
 */
export const memHack = new MemHack();
//# sourceMappingURL=global.js.map