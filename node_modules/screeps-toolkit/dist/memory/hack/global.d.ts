declare class MemHack {
    private memory?;
    private lastTick;
    private parseCpu;
    private skipWriteMax;
    private skipWriteBackoff;
    private nextWrite;
    private nextWriteInterval;
    constructor();
    /**
     * Try to reuse memory from the last tick
     * @returns CPU used for parsing memory
     */
    run(): number;
    /**
     * Set the backoff and limit for skipping memory writes
     * @param limit maximum interval between writes
     * @param backoff multiplier for the next write interval
     */
    setSkipWriteRate(limit: number, backoff?: number): void;
}
/**
 * Ripped from https://github.com/AlinaNova21/ZeSwarm/
 * Organized by Carson Burke and xTwisteDx
 *
 * Usage:
 * Before the loop, import memHack
 * At start of loop(), run memHack.run()
 */
export declare const memHack: MemHack;
export {};
