import { inRoomRangeArea, inRoomRangeXY } from "../position/utils";
import { getRoom } from "./utils";
/**
 * Run {@link Room.lookAtArea} on a given range bounded to room borders
 * @param center Center position
 * @param range Optional range
 * @returns List of results
 */
export function lookInRange(center, range = 1) {
    var _a, _b;
    return (_b = (_a = getRoom(center.roomName)) === null || _a === void 0 ? void 0 : _a.lookAtArea(...inRoomRangeArea(center, range), true)) !== null && _b !== void 0 ? _b : [];
}
/**
 * Run {@link Room.lookForAt} on a given range bounded to room borders
 * @param center Center position
 * @param type LOOK_* constant
 * @param range Optional range
 * @yields Iterator of results
 */
export function* lookForInRange(center, type, range = 1) {
    const room = getRoom(center.roomName);
    if (!room)
        return;
    for (const { x, y } of inRoomRangeXY(center, range)) {
        yield* room.lookForAt(type, x, y);
    }
}
/**
 * Run {@link Room.lookForAtArea} on a given range bounded to room borders
 * @param center Center position
 * @param type LOOK_* constant
 * @param range Optional range
 * @returns List of results
 */
export function lookForMatrixInRange(center, type, range = 1) {
    var _a, _b;
    return ((_b = (_a = getRoom(center.roomName)) === null || _a === void 0 ? void 0 : _a.lookForAtArea(type, ...inRoomRangeArea(center, range), true)) !== null && _b !== void 0 ? _b : []);
}
/**
 * Run {@link Room.lookForAt} {@link LOOK_STRUCTURES} on a given range bounded to room borders
 * @param center Center position
 * @param type STRUCTURE_* constant
 * @param range Optional range
 * @yields Iterator of structures
 */
export function* lookForStructureInRange(center, type, range = 1) {
    for (const s of lookForInRange(center, LOOK_STRUCTURES, range)) {
        if (s.structureType == type)
            yield s;
    }
}
/**
 * Run {@link RoomPosition.lookFor} {@link LOOK_STRUCTURES} on a given pos
 * @param pos Target position
 * @param type STRUCTURE_* constant
 * @yields Iterator of structures
 */
export function* lookForStructureAt(pos, type) {
    for (const s of pos.lookFor(LOOK_STRUCTURES)) {
        if (s.structureType == type)
            yield s;
    }
}
//# sourceMappingURL=find.js.map