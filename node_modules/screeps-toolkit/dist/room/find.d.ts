/// <reference types="screeps" />
/**
 * Run {@link Room.lookAtArea} on a given range bounded to room borders
 * @param center Center position
 * @param range Optional range
 * @returns List of results
 */
export declare function lookInRange(center: RoomPosition, range?: number): LookAtResultWithPos<LookConstant>[];
/**
 * Run {@link Room.lookForAt} on a given range bounded to room borders
 * @param center Center position
 * @param type LOOK_* constant
 * @param range Optional range
 * @yields Iterator of results
 */
export declare function lookForInRange<T extends keyof AllLookAtTypes>(center: RoomPosition, type: T, range?: number): Generator<AllLookAtTypes[T], void, undefined>;
/**
 * Run {@link Room.lookForAtArea} on a given range bounded to room borders
 * @param center Center position
 * @param type LOOK_* constant
 * @param range Optional range
 * @returns List of results
 */
export declare function lookForMatrixInRange<T extends keyof AllLookAtTypes>(center: RoomPosition, type: T, range?: number): LookForAtAreaResultArray<AllLookAtTypes[T], T>;
/**
 * Run {@link Room.lookForAt} {@link LOOK_STRUCTURES} on a given range bounded to room borders
 * @param center Center position
 * @param type STRUCTURE_* constant
 * @param range Optional range
 * @yields Iterator of structures
 */
export declare function lookForStructureInRange<T extends keyof ConcreteStructureMap>(center: RoomPosition, type: T, range?: number): Generator<ConcreteStructureMap[T], void, unknown>;
/**
 * Run {@link RoomPosition.lookFor} {@link LOOK_STRUCTURES} on a given pos
 * @param pos Target position
 * @param type STRUCTURE_* constant
 * @yields Iterator of structures
 */
export declare function lookForStructureAt<T extends keyof ConcreteStructureMap>(pos: RoomPosition, type: T): Generator<ConcreteStructureMap[T], void, unknown>;
